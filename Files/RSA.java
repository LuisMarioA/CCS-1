/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servlet;

/**
 *
 * @author Esli
 */

import java.math.BigInteger;
import java.security.SecureRandom;


public class RSA {

    public BigInteger n, d, e;
    public int bitlen = 1024;
    
    public RSA() {
    }

    public RSA(BigInteger n, BigInteger e) {
        this.n = n;
        this.e = e;
    }
    
    

    public void setN(BigInteger n) {
        this.n = n;
    }

    public void setD(BigInteger d) {
        this.d = d;
    }

    public void setE(BigInteger e) {
        this.e = e;
    }
     

  /** Encrypt the given plaintext message. */
  public synchronized String encrypt(String message,BigInteger e, BigInteger n) {
    return (new BigInteger(message.getBytes())).modPow(e,n).toString();
    
  }


  /** Decrypt the given ciphertext message. */
  public synchronized String decrypt(String message,BigInteger d,BigInteger n) {
    return new String((new BigInteger(message)).modPow(d,n).toByteArray());
  }


  /** Generate a new public and private key set. */
  public synchronized void generateKeys() {
    SecureRandom r = new SecureRandom();
    BigInteger p = new BigInteger(bitlen / 2, 100, r);
    BigInteger q = new BigInteger(bitlen / 2, 100, r);
    n = p.multiply(q);
    BigInteger m = (p.subtract(BigInteger.ONE)).multiply(q
        .subtract(BigInteger.ONE));
    e = new BigInteger("3");
    while (m.gcd(e).intValue() > 1) {
      e = e.add(new BigInteger("2"));
    }
    d = e.modInverse(m);
  }

  /** Return the modulus. */
  public synchronized BigInteger getN() {
    return n;
  }

  /** Return the public key. */
  public synchronized BigInteger getE() {
    return e;
  }
  public synchronized BigInteger getD() {
    return d;
  }

  /** Trivial test program. */
  public static void main(String[] args) {
   /*RSA rsa_nidia = new RSA();
   rsa_nidia.generateKeys();
      System.out.println("Nidia d: "+rsa_nidia.getD());
      System.out.println("Nidia n: "+rsa_nidia.getN());
      System.out.println("Nidia e: "+rsa_nidia.getE());*/
   RSA rsa_sam = new RSA();
   rsa_sam.setD(new BigInteger("45435790228817421170772124917687027929832908403793657593910730518161477442728280191205396448821891013558681842061480292003224770539622403142207678369191600177725213092412649121224013270918098448339050338177928597016620859158001687921734233490654056070972343405644172539979316841402652949012693106252359127143"));
   rsa_sam.setE(new BigInteger("7"));
   rsa_sam.setN(new BigInteger("159025265800860974097702437211904597754415179413277801578687556813565171049548980669218887570876618547455386447215181022011286696888678410997726874292170625870438636015652936844078227326692580442576383732925517729752574362585360560669818918164894373214231067271027966286523895820094300373000885355367169145971"));
   RSA rsa_gis = new RSA();
   rsa_gis.setD(new BigInteger("69044081687318336275385693449222011501224985103709430873826683964150036371741362579379200672669893465331879171095756929811284104017129745996353620688709053938953138141600046981742643652749691089483440580382037679178005261435223141593409177292100711247454677126530136765763306348543608886608198053282570442797"));
   rsa_gis.setE(new BigInteger("5"));
   rsa_gis.setN(new BigInteger("115073469478863893792309489082036685835374975172849051456377806606916727286235604298965334454449822442219798618492928216352140173361882909993922701147848445009635714913126326087806748355052033918679008124873359445259805237526306982698490770498474849797352301465097751063183564653489429557394522425878488899933"));
   
  /* RSA rsa_esli = new RSA();
      rsa_esli.generateKeys();
      System.out.println("Esli d: "+rsa_esli.getD());
      System.out.println("Esli n: "+rsa_esli.getN());
      System.out.println("Esli e: "+rsa_esli.getE());
   RSA rsa_mario = new RSA();
      rsa_mario.generateKeys();
      System.out.println("Mario d: "+rsa_mario.getD());
      System.out.println("Mario n: "+rsa_mario.getN());
      System.out.println("Mario e: "+rsa_mario.getE());
      
    RSA rsa_fer = new RSA();
      rsa_fer.generateKeys();
      System.out.println("Fer d: "+rsa_fer.getD());
      System.out.println("Fer n: "+rsa_fer.getN());
      System.out.println("Fer e: "+rsa_fer.getE());*/
 /*   
Sam
d: 81752947689090304210363798090957062256237197138132457068140884898085954166796086002794467465945459308828035590580375603261235095166488893411139147172251318857086833730338471295572154872543052656027784631494759799733332204674989819255027292299887656487075187197620248856841487573444395235891380347439977894643
e: 7
n: 114454126764726425894509317327339887158732075993385439895397238857320335833514520403912254452323643032359249826812525844565729133233084450775594806041151867909233103311672332390642588743097058782756060744861179363669610717552382984912266888197693958305465795860084966511339290648893794337498919598078398073601

Gis  
d: 69044081687318336275385693449222011501224985103709430873826683964150036371741362579379200672669893465331879171095756929811284104017129745996353620688709053938953138141600046981742643652749691089483440580382037679178005261435223141593409177292100711247454677126530136765763306348543608886608198053282570442797
e: 5
n: 115073469478863893792309489082036685835374975172849051456377806606916727286235604298965334454449822442219798618492928216352140173361882909993922701147848445009635714913126326087806748355052033918679008124873359445259805237526306982698490770498474849797352301465097751063183564653489429557394522425878488899933

Nidia
d: 72809032386559587153373993467749106672115950108392570071408663964905928180337067482572721112060223685041147369683457161189154680136384487638796698491679930611315691145415388904705829239726290356623648763618078588928639393250538692985461981466410200771114721805506514345711073276859714989852606060459926176269
e: 5
n: 121348387310932645255623322446248511120193250180654283452347773274843213633895112470954535186767039475068578949472428601981924466893974146064661164152799906425359899897024451233634425326187287583034230190660086226241222117835609642321621812769416982363943947480398927700673601552508244092331940150490446167713

Esli
Esli d: 45866250933084285465364816302132873131828322728266021271655778852591690961519797069356997797454345414912645414122248271287629706907861216508092612840484771235280592370153282411381495741460298159178443124574112500261391513018119197149847944768455802484602273381969213666730725503302318315683691793270565655357
Esli n: 76443751555140475775608027170221455219713871213776702119426298087652818269199661782261662995757242358187742356870413785479382844846435360846821021400807969895889930152468120429578373616128226187309026450471080397224742490304620512567666519332321560553579448536226431085828653631699638893045453466006633633323
Esli e: 5

Mario
Mario d: 59143548894282281249071081056976279268945946285924929775047755886387385650756565382117330636128676830566344235281244599622298197593345944333708899097353948015291870512872279081823430057179034023527288004543193888768573852629395458319126178395927215881141174396088531050647411028921301972300313151108421352547
Mario n: 88715323341423421873606621585464418903418919428887394662571633829581078476134848073175995954193015245849516352921866899433447296390018916500563348646030940919653403075710014284225467059238077474206230448309858758247803743027367401188433384802283134475611464267900527658658386492116489360690995407830272720073
Mario e: 3
      
Fernando
Fer d: 45435790228817421170772124917687027929832908403793657593910730518161477442728280191205396448821891013558681842061480292003224770539622403142207678369191600177725213092412649121224013270918098448339050338177928597016620859158001687921734233490654056070972343405644172539979316841402652949012693106252359127143
Fer n: 159025265800860974097702437211904597754415179413277801578687556813565171049548980669218887570876618547455386447215181022011286696888678410997726874292170625870438636015652936844078227326692580442576383732925517729752574362585360560669818918164894373214231067271027966286523895820094300373000885355367169145971
Fer e: 7      
      */
    

   String text1 = "463d9def645bf6fe68f7e9b5ec8c6b68dcb6abe4";
    System.out.println("Plaintext: " + text1);
    //BigInteger plaintext = new BigInteger(text1.getBytes());
    String ciphertext = rsa_sam.encrypt(text1,rsa_sam.getD(),rsa_sam.getN());
      System.out.println(ciphertext);
    /*System.out.println("Ciphertext: " + ciphertext);
    String algo = rsa_gis.decrypt(ciphertext,rsa_sam.getE(),rsa_sam.getN());
    System.out.println("Plaintext: " + algo);*/
  }
}